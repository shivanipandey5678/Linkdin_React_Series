
---

## Introduction to React

Let's dive into React and understand why it’s so popular in modern web development. But before that, let's set the context by looking at how web development has evolved.

---

### **HTML and CSS: The Early Days**

In the early days of the web, most websites were static and “read-only.” They worked like digital flyers—people could look at them but couldn’t interact much. These early sites were built with HTML, which gave us the structure, and CSS, which brought in the styling. This combination allowed us to design simple, visually appealing pages, but interaction was limited.

---

### **JavaScript: Bringing Interactivity**

JavaScript changed everything by making web pages interactive. It allowed pages to respond to user actions, like clicks or keyboard input. For instance, if you click "Apply Now" on the Masai School website, JavaScript triggers a response that redirects you to the signup page. This level of interaction was a game-changer for user experience.

---

### **Can We Build Websites with Just HTML, CSS, and JavaScript?**

The answer is “Yes.” You can build functional websites using just HTML, CSS, and JavaScript. But as web applications grew more complex, developers needed a more efficient, scalable way to manage this complexity. Enter React.

---

## **What is React?**

React is a **JavaScript library**. It’s not a new language; it’s a tool built on top of JavaScript to help developers create dynamic, interactive user interfaces more efficiently.

When coding in React, you’re still using HTML, CSS, and JavaScript, but React offers a new way of organizing and managing that code, making it much easier to work with large applications.

---

### **Why React?**

React introduces two essential concepts that set it apart:

1. **Imperative vs. Declarative Code**  
   Let’s look at a simple example to understand this.

   Imagine we want to display a quote on the screen:

   In **vanilla JavaScript**, you’d write:
   ```html
   <script>
     const element = document.createElement("p");
     element.textContent = "Carpe Diem";
     element.className = "quote";
     document.getElementById("root").appendChild(element);
   </script>
   ```

   Here, we’re giving JavaScript specific instructions, step-by-step. This is called **imperative programming** because we’re telling JavaScript exactly how to create and display the content.

   With **React**, you can write the same functionality in a more readable way:
   ```html
   <script type="text/babel">
     const root = ReactDOM.createRoot(document.getElementById("root"));
     root.render(<p className="quote">Carpe Diem</p>);
   </script>
   ```

   In this **declarative style**, we simply tell React *what* we want: “Show a paragraph with a quote inside the root element.” React handles the “how” for us, making code cleaner and easier to read.

2. **Components**  
   React applications are built using components, which are small, reusable pieces of code. Each component represents part of the user interface, like buttons, forms, or entire sections of a page. Components make it easy to break down complex UIs into manageable, reusable parts.

---

### **Why React is Useful for Modern Web Development**

React’s declarative style and component-based structure make it ideal for building **dynamic, interactive, and large-scale applications** efficiently. With React, you can build scalable applications that are easier to maintain and update over time.

---

## **Getting Hands-On with React**

In the next sessions, we’ll explore how to set up a React app and write our first components. The goal isn’t to memorize every detail but to get comfortable with the React way of thinking. Remember, React may look like JavaScript, HTML, and CSS, but the mindset is different.

---

